from random import randint
from cmu_graphics import *
import math
import time
import pygame
import matplotlib.pyplot as plt
from pytube import YouTube
import random
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import os

WIDTH, HEIGHT = 1200, 800
WAVE_COUNT = 7
WAVE_SPEED = 2
WAVE_HEIGHT = 30
WAVE_SPACING = 40
WAVE_COLORS = [
    (70, 130, 180), (95, 158, 160), (100, 180, 200),
    (135, 206, 235), (176, 224, 230), (173, 216, 230), (200, 240, 255)
]
BUTTON_WIDTH, BUTTON_HEIGHT = 200, 50
BEACH_HEIGHT = 150
STARFISH_COUNT = 8
STARFISH_COLORS = ["orange", "yellow", "red", "pink"]
SKY_GRADIENT = [(135, 206, 235), (173, 216, 230)]
MOOD_DATA = [6, 7, 8, 5, 9]  # Example mood data for graphs


wave_offsets = [i * 60 for i in range(WAVE_COUNT)]
starfish_positions = []
current_screen = "menu"
affirmations = [
    "I am calm, centered, and in control of my emotions.",
    "Each deep breath brings me closer to inner peace.",
    "I am safe, I am calm, and I trust the journey.",

    "I am grateful for the good things in my life.",
    "Every day, I find reasons to be thankful.",
    "Gratitude fills my heart and uplifts my spirit.",

    "I am worthy of love and kindness.",
    "I accept myself just as I am.",
    "My body, mind, and spirit deserve respect and care.",

    "I am capable of achieving my goals.",
    "Each day, I am improving and growing.",
    "I am resilient, strong, and brave.",

    "I release all tension and embrace relaxation.",
    "I let go of what I cannot control.",
    "I deserve rest and renewal.",

    "My mind is clear, and I am focused on my purpose.",
    "I trust my intuition to guide me.",
    "I approach challenges with confidence and clarity.",

    "I am healing, and every cell in my body is working for my health.",
    "I let go of past hurts and embrace the present moment.",

    "I attract positivity, abundance, and joy.",
    "Opportunities flow into my life effortlessly.",
    "I am open to receiving all the good the universe has to offer.",

    "I nurture meaningful and supportive relationships.",
    "I am surrounded by love and positive energy.",
    "I communicate with clarity and compassion.",

    "I am powerful, and I create the life I want.",
    "I trust in my ability to overcome challenges.",
    "I am proud of the progress Iâ€™ve made."
]
word_frequency = {"peace": 10, "calm": 8, "focus": 5}  # Example word frequency


def initialize_starfish_positions():
    """Randomly position starfish on the beach."""
    global starfish_positions
    starfish_positions = [
        (randint(50, WIDTH - 50), HEIGHT - BEACH_HEIGHT + randint(-10, 10), STARFISH_COLORS[i % len(STARFISH_COLORS)])
        for i in range(STARFISH_COUNT)
    ]

def draw_gradient_background(app):

    gradient = [(25, 25, 112), (70, 130, 180)] if app.night_mode else SKY_GRADIENT
    
    for i in range(HEIGHT - BEACH_HEIGHT):
        ratio = i / (HEIGHT - BEACH_HEIGHT)
        r1, g1, b1 = gradient[0]
        r2, g2, b2 = gradient[1]
        blended_color = rgb(
            int(r1 * (1 - ratio) + r2 * ratio),
            int(g1 * (1 - ratio) + g2 * ratio),
            int(b1 * (1 - ratio) + b2 * ratio),
        )
        drawLine(0, i, WIDTH, i, fill=blended_color)


def update_waves():
    for i in range(len(wave_offsets)):
        wave_offsets[i] += WAVE_SPEED
        if wave_offsets[i] >= 360:
            wave_offsets[i] -= 360

def draw_waves():
    for layer, offset in enumerate(wave_offsets):
        color = rgb(*WAVE_COLORS[layer % len(WAVE_COLORS)])
        for x in range(-50, WIDTH + 50, 50):
            y = HEIGHT - BEACH_HEIGHT - layer * WAVE_SPACING + math.sin(math.radians(x + offset)) * WAVE_HEIGHT
            drawCircle(x, y, 30, fill=color, border=None)

def draw_beach():

    drawRect(0, HEIGHT - BEACH_HEIGHT, WIDTH, BEACH_HEIGHT, fill="sandybrown")
    for x, y, color in starfish_positions:
        draw_starfish(x, y, 20, color)

def draw_starfish(x, y, size, color):
    points = [
        (x, y - size),
        (x + size * 0.3, y - size * 0.3),
        (x + size, y - size * 0.3),
        (x + size * 0.4, y + size * 0.1),
        (x + size * 0.5, y + size),
        (x, y + size * 0.5),
        (x - size * 0.5, y + size),
        (x - size * 0.4, y + size * 0.1),
        (x - size, y - size * 0.3),
        (x - size * 0.3, y - size * 0.3),
    ]
    drawPolygon(*sum(points, ()), fill=color, border=None)

def draw_menu(app):
    drawLabel("Welcome to the Meditation App", WIDTH // 2, 50, size=36, fill="black", bold=True)
    
    # Meditation button
    drawRect(100, 150, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Meditate", 200, 175, size=24)
    
    # Journal button
    drawRect(100, 225, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Journal", 200, 250, size=24)
    
    # Mood Graph button
    drawRect(100, 300, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Mood Graph", 200, 325, size=24)
    
    # Hours Meditated button
    drawRect(100, 375, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Hours Meditated", 200, 400, size=24)
    
    # Affirmations button
    drawRect(100, 450, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Affirmations", 200, 475, size=24)
    
    # Most Frequent Words button
    drawRect(100, 525, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Word Cloud", 200, 550, size=24)

    # Calendar Button
    drawRect(100, 600, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Calendar", 200, 625, size=24)

    # Night/Day Mode Button
    drawRect(1000, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Night Mode", 1075, 75, size=18, fill="black")

    drawRect(100, 675, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Pomodoro Timer", 200, 700, size=24)

    drawRect(100, 700, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("Set Goal", 200, 725, size=24)



def draw_hours_meditated_screen(app):
    drawLabel(f"Total Hours Meditated: {hours_meditated:.1f}", WIDTH // 2, HEIGHT // 2, size=36, fill="black")
    
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def calculate_word_frequency():
    global word_frequency
    word_frequency.clear()
    for entry in journal_entries:
        for word in entry["feelings"].lower().split():
            word = ''.join(c for c in word if c.isalnum())
            if word:
                word_frequency[word] = word_frequency.get(word, 0) + 1


journal_entries = []  # {date, mood, feelings}

def add_journal_entry(mood, feelings):
    global journal_entries
    current_date = time.strftime("%Y-%m-%d")  # Get the current date
    entry = {"date": current_date, "mood": mood, "feelings": feelings}
    journal_entries.append(entry)

def view_journal_entries():
    drawLabel("Journal Entries", WIDTH // 2, 100, size=36, fill="black")
    y_offset = 150
    for entry in journal_entries:
        date = entry["date"]
        mood = entry["mood"]
        feelings = entry["feelings"]
        drawLabel(f"{date}: Mood {mood}, Feelings: {feelings}", WIDTH // 2, y_offset, size=18, fill="darkblue")
        y_offset += 30
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def draw_word_cloud_screen(app):

    drawLabel("Most Frequent Words", WIDTH // 2, 100, size=36, fill="black")
    calculate_word_frequency()
    sorted_words = sorted(word_frequency.items(), key=lambda x: -x[1])
    for i, (word, count) in enumerate(sorted_words[:10]):  # Top 10 words
        drawLabel(f"{word}: {count}", WIDTH // 2, 150 + i * 30, size=24, fill="darkgreen")
    
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def onAppStart(app):
    app.current_screen = "menu"  # default screen
    initialize_starfish_positions()
    app.inputs = {"mood": "", "feelings": ""}
    app.active_input = None
    app.current_affirmation = random.choice(affirmations)
    app.night_mode = False
    app.work_time = 0
    app.break_time = 0
    app.timer_active = False
    app.error_message = ""
    app.stepsPerSecond = 1  # Accurate 1-second updates
    app.timer_active = False
    app.steps=1

hours_meditated = 0.0

def onStep(app):
    global meditation_timer, meditation_started, meditation_start_time
    update_waves()

    if meditation_started and meditation_timer > 0:
        meditation_timer -= 1
        if meditation_timer == 0:
            stop_meditation()
            app.meditation_audio.stop()

    if app.timer_active:
        elapsed_time = time.time() - app.pomodoro_start_time
        if app.work_time > 0:
            app.work_time = max(0, app.work_time - elapsed_time)
        elif app.break_time > 0:
            app.break_time = max(0, app.break_time - elapsed_time)
        else:
            app.timer_active = False
            app.pomodoro_start_time = None


    app.steps += 1


def onKeyPress(app, key):
    if app.current_screen == "journal" and app.active_input in app.inputs:
        if key == "backspace":
            app.inputs[app.active_input] = app.inputs[app.active_input][:-1]
        elif len(key) == 1 and len(app.inputs[app.active_input]) < 50:  # Limit 50 characters
            app.inputs[app.active_input] += key

pomodoro_start_time = None

def onMousePress(app, mouseX, mouseY):

    print(f"Mouse pressed at: {mouseX}, {mouseY}")

    global current_screen, current_meditation_duration, pomodoro_start_time

    if app.current_screen == "pomodoro":
        if 400 < mouseX < 600 and 400 < mouseY < 450:  # Start Button
            app.work_time = 25 * 60  # 25 minutes in seconds
            app.break_time = 5 * 60   # 5 minutes in seconds
            app.timer_active = True   # Activate the timer
            app.pomodoro_start_time = time.time()  # Track start time
        elif 700 < mouseX < 900 and 400 < mouseY < 450:  # Stop Button
            app.timer_active = False  # Deactivate the timer
            app.pomodoro_start_time = None  # Reset the start time

    if 50 < mouseX < 200 and 50 < mouseY < 100:
        if app.current_screen != "menu":  
            app.current_screen = "menu"

    if app.current_screen == "menu":
        if 100 < mouseX < 300:
            if 150 < mouseY < 200:
                app.current_screen = "meditate"
            elif 225 < mouseY < 275:
                app.current_screen = "journal"
            elif 300 < mouseY < 350:
                app.current_screen = "mood_graph"
            elif 375 < mouseY < 425:
                app.current_screen = "hours_meditated"
            elif 450 < mouseY < 500:
                app.current_screen = "affirmations"
            elif 525 < mouseY < 575:
                app.current_screen = "word_cloud"
            elif 600 < mouseY < 650:
                app.current_screen = "calendar"
            elif 675 < mouseY < 725:  # Pomodoro Timer Button
                app.current_screen = "pomodoro"
            elif 1000 < mouseX < 1150 and 50 < mouseY < 100:  # Night Toggle Button
                toggle_night_mode(app)
            elif 100 < mouseX < 300 and 700 < mouseY < 750:  # Set Goal Button
                app.current_screen = "goal_setting"

    elif app.current_screen == "meditate":
        if 400 < mouseX < 600:
            if 200 < mouseY < 250:
                start_meditation(5)
            elif 300 < mouseY < 350:
                start_meditation(10)
            elif 400 < mouseY < 450:
                start_meditation(20)
        elif 700 < mouseX < 900 and 500 < mouseY < 550:  # Stop button
            stop_meditation()


    elif app.current_screen == "mood_graph":
        if 50 < mouseX < 200 and 50 < mouseY < 100:  # Back button
            app.current_screen = "menu"

    elif app.current_screen == "hours_meditated":
        if 50 < mouseX < 200 and 50 < mouseY < 100:  # Back button
            app.current_screen = "menu"

    elif app.current_screen == "affirmations":
        if 400 < mouseX < 600 and 500 < mouseY < 550:  # Change Affirmation Button
            app.current_affirmation = random.choice(affirmations)
        elif 50 < mouseX < 200 and 50 < mouseY < 100:  # Back button
            app.current_screen = "menu"

    elif app.current_screen == "word_cloud":
        if 50 < mouseX < 200 and 50 < mouseY < 100:  # Back button
            app.current_screen = "menu"

    elif app.current_screen == "calendar":
        if 50 < mouseX < 200 and 50 < mouseY < 100:  # Back button
            app.current_screen = "menu"

    elif app.current_screen == "pomodoro":
        if 400 < mouseX < 600 and 400 < mouseY < 450:  # Start
            app.work_time = 25 * 60
            app.break_time = 5 * 60
            app.timer_active = True
            pomodoro_start_time = time.time()
        elif 700 < mouseX < 900 and 400 < mouseY < 450:  # Stop
            app.timer_active = False
            pomodoro_start_time = None

    if 1000 < mouseX < 1150 and 50 < mouseY < 100:
        app.night_mode = not app.night_mode

    elif app.current_screen == "journal":
        if 300 < mouseX < 900 and 200 < mouseY < 250:  
            app.active_input = "mood"
        elif 300 < mouseX < 900 and 300 < mouseY < 350:  
            app.active_input = "feelings"
        elif 500 < mouseX < 700 and 400 < mouseY < 450:  
            mood = app.inputs["mood"].strip()
            feelings = app.inputs["feelings"].strip()
            if mood.isdigit() and 1 <= int(mood) <= 10 and feelings:
                add_journal_entry(int(mood), feelings)
                app.inputs = {"mood": "", "feelings": ""}
                app.error_message = ""
            else:
                app.error_message = "Invalid input. Mood must be 1-10, and feelings cannot be empty."

    elif app.current_screen == "goal_setting":
        if 400 < mouseX < 800 and 200 < mouseY < 250:
            app.active_input = "goal"
        elif 500 < mouseX < 700 and 300 < mouseY < 350:
            goal = app.inputs.get("goal", "").strip()
            if goal.isdigit() and int(goal) > 0:
                set_daily_goal(app, int(goal))
                app.inputs["goal"] = ""
                app.current_screen = "menu"
            else:
                app.error_message = "Invalid goal. Enter a positive number."



def draw_view_journal_screen():

    drawLabel("Journal Entries", WIDTH // 2, 100, size=36, fill="black", bold=True)
    y = 150
    for entry in journal_entries:
        drawLabel(f"{entry['date']} - Mood: {entry['mood']} - {entry['feelings']}", WIDTH // 2, y, size=18, fill="black")
        y += 30

    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")
    

def draw_meditation_screen(app):

    drawLabel("Select Meditation Duration", WIDTH // 2, 100, size=36, fill="black", bold=True)
    
    drawRect(400, 200, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("5 Minutes", 500, 225, size=24)
    
    drawRect(400, 300, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("10 Minutes", 500, 325, size=24)
    
    drawRect(400, 400, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("20 Minutes", 500, 425, size=24)
    
    drawRect(400, 500, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightgreen", border="black")
    drawLabel("Start", 500, 525, size=24)
    
    drawRect(700, 500, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightcoral", border="black")
    drawLabel("Stop", 800, 525, size=24)

    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

    if meditation_started:
        minutes = meditation_timer // 60
        seconds = meditation_timer % 60
        drawLabel(f"Time Remaining: {minutes:02}:{seconds:02}", WIDTH // 2, 600, size=36, fill="darkblue")


def draw_calendar_screen(app):
    drawLabel("Journal Calendar", WIDTH // 2, 100, size=36, fill="black")
    y_offset = 150
    for entry in journal_entries:
        drawLabel(f"{entry['date']} - Mood: {entry['mood']} - {entry['feelings']}", WIDTH // 2, y_offset, size=18, fill="black")
        y_offset += 30

    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24)
    
    # Back Button
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def redrawAll(app):
    draw_gradient_background(app)
    draw_waves()
    draw_beach()

    if app.current_screen == "menu":
        draw_menu(app)
    elif app.current_screen == "meditate":
        draw_meditation_screen(app)
    elif app.current_screen == "journal":
        draw_journal_screen(app)
    elif app.current_screen == "mood_graph":
        draw_mood_graph_screen(app)
    elif app.current_screen == "hours_meditated":
        draw_hours_meditated_screen(app)
    elif app.current_screen == "affirmations":
        draw_affirmation_screen(app)
    elif app.current_screen == "word_cloud":
        draw_word_cloud_screen(app)
    elif app.current_screen == "calendar":
        draw_calendar_screen(app)
    elif app.current_screen == "pomodoro":
        draw_pomodoro_screen(app)

def draw_affirmation_screen(app):
    drawLabel("Affirmation:", WIDTH // 2, HEIGHT // 2 - 100, size=36, fill="black")
    drawLabel(app.current_affirmation, WIDTH // 2, HEIGHT // 2, size=24, fill="darkblue")
    
    drawRect(400, 500, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightblue", border="black")
    drawLabel("New Affirmation", 500, 525, size=24, fill="black")
    
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def toggle_night_mode(app):
    app.night_mode = not app.night_mode
    if app.night_mode:
        drawLabel("Day Mode", 1075, 75, size=18, fill="black")
    else:
        drawLabel("Night Mode", 1075, 75, size=18, fill="black")


meditation_timer = 0
meditation_started = False
current_meditation_duration = 0
meditation_audio_url = None


    global meditation_timer, meditation_started, current_meditation_duration
    meditation_timer = duration * 60
    meditation_started = True
    current_meditation_duration = duration

    if duration == 5:
        app.meditation_audio = Sound('https://s3.amazonaws.com/cmu-cs-academy.lib.prod/sounds/Drum1.mp3')
    elif duration == 10:
        app.meditation_audio = Sound('https://s3.amazonaws.com/cmu-cs-academy.lib.prod/sounds/Drum2.mp3')
    elif duration == 20:
        app.meditation_audio = Sound('https://s3.amazonaws.com/cmu-cs-academy.lib.prod/sounds/Drum3.mp3')
    app.meditation_audio.play()

def stop_meditation():
    global meditation_started, meditation_timer, hours_meditated
    if meditation_started:
        elapsed_time = (current_meditation_duration * 60 - meditation_timer) / 3600  # Convert to hours
        hours_meditated += elapsed_time
    meditation_started = False
    meditation_timer = 0

def play_audio_stream(url):
    try:
        yt = YouTube(url)
        stream = yt.streams.filter(only_audio=True).first()
        if not stream:
            print("No audio stream available.")
            return
        filename = f"{yt.video_id}.mp3"
        if not os.path.exists(filename):
            stream.download(filename=filename)
        pygame.mixer.init()
        pygame.mixer.music.load(filename)
        pygame.mixer.music.play()
    except Exception as e:
        print(f"Error playing audio: {e}")


def stop_audio():
    try:
        pygame.mixer.music.stop()
        temp_file = "temp_audio.mp3"
        if os.path.exists(temp_file):
            os.remove(temp_file)  # Clean up downloaded file
    except pygame.error as e:
        print(f"Error stopping audio: {e}")


def draw_journal_screen(app):
    drawLabel("Journal Entry", WIDTH // 2, 100, size=36, fill="black", bold=True)
    drawRect(300, 200, 600, 50, fill="lightyellow", border="black")
    drawLabel(app.inputs["mood"], 310, 225, size=18, fill="black")
    drawLabel("Enter Mood (1-10):", 310, 190, size=18, fill="darkblue")

    drawRect(300, 300, 600, 50, fill="lightyellow", border="black")
    drawLabel(app.inputs["feelings"], 310, 325, size=18, fill="black")
    drawLabel("How do you feel today?", 310, 290, size=18, fill="darkblue")

    drawRect(500, 400, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightgreen", border="black")
    drawLabel("Save Entry", 600, 425, size=24)

    if app.error_message:
        drawLabel(app.error_message, WIDTH // 2, 500, size=20, fill="red")

    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24)

mood_graph_data = []  # graph

def draw_mood_graph_screen(app):
    drawLabel("Mood Tracker", WIDTH // 2, 100, size=36, fill="black")
    
    if len(mood_graph_data) > 1:
        for i, mood in enumerate(mood_graph_data):
            drawCircle(200 + i * 100, HEIGHT - 100 - mood * 30, 10, fill="blue")
            if i > 0:
                prev_x, prev_y = 200 + (i - 1) * 100, HEIGHT - 100 - mood_graph_data[i - 1] * 30
                drawLine(prev_x, prev_y, 200 + i * 100, HEIGHT - 100 - mood * 30, fill="blue")
    else:
        drawLabel("No data available yet. Add journal entries.", WIDTH // 2, HEIGHT // 2, size=24, fill="red")
    
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24, fill="black")

def export_calendar():
    with open("calendar_export.css", "w") as f:
        for entry in journal_entries:
            f.write(f"Date: {entry['date']}, Mood: {entry['mood']}, Feelings: {entry['feelings']}\n")
    print("Calendar exported to calendar_export.css")

def set_daily_goal(goal):
    app.daily_goal = goal
    app.daily_goal_reached = False

def check_daily_goal():
    if hours_meditated >= app.daily_goal / 60:
        app.daily_goal_reached = True
        drawLabel(f"Daily Goal of {app.daily_goal} Minutes Reached!", WIDTH // 2, HEIGHT // 2, size=36, fill="green")

def draw_goal_setting_screen(app):
    drawLabel("Set Daily Meditation Goal (minutes):", WIDTH // 2, 100, size=24, fill="black")
    drawRect(400, 200, 400, 50, fill="lightyellow", border="black")
    goal_text = app.inputs.get("goal", "")
    drawLabel(goal_text, 410, 225, size=24, fill="black")
    drawRect(500, 300, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightgreen", border="black")
    drawLabel("Set Goal", 600, 325, size=24)
    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24)

def draw_pomodoro_screen(app):
    drawLabel("Pomodoro Timer", WIDTH // 2, 100, size=36, fill="black", bold=True)

    work_minutes = app.work_time // 60
    work_seconds = app.work_time % 60
    break_minutes = app.break_time // 60
    break_seconds = app.break_time % 60

    if app.timer_active:
        drawLabel(f"Work Time Remaining: {work_minutes:02}:{work_seconds:02}", WIDTH // 2, 200, size=24, fill="black")
        drawLabel(f"Break Time Remaining: {break_minutes:02}:{break_seconds:02}", WIDTH // 2, 300, size=24, fill="black")
    else:
        drawLabel("Pomodoro Timer Inactive", WIDTH // 2, 250, size=24, fill="red")

    drawRect(400, 400, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightgreen", border="black")
    drawLabel("Start", 500, 425, size=24)

    drawRect(700, 400, BUTTON_WIDTH, BUTTON_HEIGHT, fill="lightcoral", border="black")
    drawLabel("Stop", 800, 425, size=24)

    drawRect(50, 50, 150, 50, fill="lightgrey", border="black")
    drawLabel("Back", 125, 75, size=24)

runApp(width=WIDTH, height=HEIGHT)
